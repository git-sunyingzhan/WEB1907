js组成
	1）变量：js是弱类型语言，使用var关键字声明变量
		形如：var a = 1;
			 var s = "张三";
		拆：
			var a;	// 声明变量a，a没有类型
			var a = 1;	// 声明变量a并且初始化为1，a类型为number
			a = "张三";	// a为string类型（变量提升）
			
		typeof 变量名;	// 验证变量类型
		console.log(内容);	//打印语句
		
		注意：
			1.js是弱类型语言，不同的变量类型会根据数值自动给定类型
			2.变量没有类型，统一用关键字var声明，变量的值是有类型的
			3.使用‘=’进行赋值，没有初始化的变量自动取值underfined
			4.js存在变量声明提升（js会根据不同的值自动转成不同的数据类型）
	2)数据类型
		a.基本类型		number、string、boolean
			number：不区分整数和小数
			string：一对单引号或者双引号包裹的字符串
				--单双引号交替使用
				--特殊字符需要转译 \
				常用函数：
					str.indexOf("",[fromIndex]);返回指定字符串在str中第一次出现的位置(从fromIndex开始找第一个出现的位置)
					str.replace("","")；将指定字符串替换为指定字符串，只替换第一个，属于不完全替换
			boolean：仅有两个值（true false）,可以自动作为数值，参与运算，true值为1，false值为0
		b.特殊类型		undefined、null
			undefined：变量声明未初始化，该变量的值和类型均为undefined
			null：代表"无值"或者"无对象",可以通过一个变量赋值为null来清空变量的内容
		c.对象类型		object
			内置对象	外部对象	自定义对象
	3）类型转换
		a.自动转换（直接转换属于默认规则）
			number+string = string
			string+boolean = string
			number+boolean = number
			boolean+boolean = number
		b.强制转换（利用类型转换函数）
			toString():任何类型转换为string类型
			parseInt():强转为整数，全局函数，截取功能
			isNaN():判断是否为非数字，如果是数字返回false，否则返回true
			注意：如果不能强转，则返回NAN(Not a Number)
	
	案例1：
		验证用户输入的是否是数字，如果是则返回数字的平方，如果不是则返回
	
	4）运算符
		a.数学运算符		+、-、*、/、++、--、
			+	表示数学加法\字符串连接运算
			- * 有数值字符串，当成数值参与运算
			/   java中7/2=3  js中7/2=3.5
		b.关系运算符  >  >=  <  <=  ==  !=
			==    只比较值，不比较类型
			===	  比较类型和值（比较地址值）
		c.逻辑运算符  &（与）	|（或）	 !（非）
			短路逻辑：结果为boolean类型
			非短路类型：结果为number类型
		d.三目运算符（三元/条件）
			判断表达式？表达式1:表达式2；
		注意：js中，出现的判断表达式/条件表达式，可以为任意表达式，可以为任意类型。
			转换规则：
				非0数字/非空字符串/对象--->true
				0/null/""/undefined/NaN--->false
	5）流程控制
		a.分支流程
			if else
			switch  case
		b.循环流程
			for
			while
			do while
	
	案例2:用户在页面输入一个值，判断是否为50，要求提示用户输大了，还是输小了（三目运算）
		注意：在js中，this代表当前节点
	案例3:统计输入框中的敏感字(sb)出现的次数，将敏感字替换为"**"
	
	调错方式：
		1.在js代码中，添加conslose.log()或者alert()
		2.检查浏览器缓存的js文件，看错误信息
		3.用断点debugger调试